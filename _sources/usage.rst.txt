Usage
=====

Installation
------------

To install and use this project, follow these steps:

**Prerequisites**
 Ensure you have the following dependencies installed:

1. Python 3.9 required:

.. code-block:: console

   (.venv) $ sudo apt install software-properties-common -y
   (.venv) $ sudo add-apt-repository ppa:deadsnakes/ppa
   (.venv) $ sudo apt-get update
   (.venv) $ sudo apt-get install python3.9

2. Clone the repository:

.. code-block:: console

   (.venv) $ git clone https://github.com/LADES-PEQ/BSW-class.git

3. Navigate to the project directory:

.. code-block:: console

   (.venv) $ cd BSW-class/src


4. Run the main script:

.. code-block:: console

   (.venv) $ python3 main.py

.. note::
   If running *main.py* produces a figure without any error, then you are ready to program with this class.


Creating BSW type objects
-------------------------

To use the class, you must first instantiate a BSW type object with ``BSW()`` constructor:

.. py:function:: BSW()

   :param: Nothing.
   :return: Nothing.


The following code creates a first_simul object of type BSW in the main.py

.. code-block:: python

   first_simul = BSW()

.. _carregando-arquivos:

Loading files
-------------

Once a BSW type object has been instantiated, it is then possible to load a file with .csv extension using the ``load_data()`` method belonging to this class

.. py:function:: load_data(value, cut=0.0, kalman_filtered=True, process_cov=1e-5, noise_cov=0.01)

    Returns two dataframes, one for training and one for testing.

   :param value: file name with .csv extension
   :type value: str
   :raise FileNotFoundError: if the file was not found.
   :raise csv.Error: when there is an error reading.
   :param cut: an optional parameter that represents on a scale from 0 to 1 the cutoff value for splitting the data into training and test sets. By default, the cutoff value=0.0 indicates that the test set is empty and the training and test data are the same.
   :type cut: float
   :param kalman_filtered: an optional parameter that allows you to use or not use the :ref:`Kalman filter <Kalman filter>` when fitting the model to the data.
   :type cut: Boolean 
   :param process_cov: an optional parameter that allows you to give a value to the process covariance during filtering. 
   :type cut: float
   :param noise_cov: an optional parameter that allows you to give a value to the covariance of the measurements during the filtering.
   :type cut: float    
   :return: self._data_train, self._data_test.
   :rtype: Pandas dataframe, Pandas dataframe

.. note::
 In this version of the BSW class, the Kalman filter uses the same values of covariances (process and measurements) for all data. 
 If the Kalman filter is enabled (**kalman_filtered=True**), a file with the filename followed by **_filtered.csv** is generated containing the filtered data. The following code snippet is responsible for this effect:

 .. code-block:: python

    # Saving the filtered data to file .csv
    File_Name_temp = self.file_name_without_extension(self.file_name)
    File_Name_temp = File_Name_temp + '_filtered.csv'
    self.df_filtered.to_csv(File_Name_temp, header=False, index=False)

The loaded data file must contain columns in the following order: 
**column (1)** = :math:`{BS\&W}_{o}`, **column (2)**  = :math:`E_e`, **column (3)** = :math:`T`, **column (4)** = :math:`K_p`, **column (5)** = :math:`Q_L`, **column (6)** = Experiment Number, **column (7)**  = Gravity :math:`API`.
The last column can be included or not by the user. The class during its execution is able to detect the presence of this column and adjust the model considering the API or not.

.. figure:: ./figura1.jpg
   
   Data format in file with '.csv' extension 

The following code loads a file named *all-5-oil.csv* and does not use the Kalman filter to smooth the data. Here, it is used the parameter cut = 0.1, which indicates that the loaded data will be split into 10% for test set and 90% 
for training set. The test set returned by the method can be used as an input parameter in the :ref:`predict method <Predict_section>`. By default cut = 0.0 indicating that the loaded data will not be split 
into different training and test sets.

.. code-block:: python

   X_train, X_test = first_simul.load_data('all-5-oil.csv', kalman_filtered=False, cut=0.1)

Here X_test can be used later as an input parameter in :ref:`predict() <Predict_section>` method to see how the model fit to this set.

.. warning::
   Because of the modeling is based on classical optimization and is not a machine learning method, its prediction outside the training interval should be done with caution. The further away the test point is from the training interval, 
   the greater the error will be. Therefore, it is recommended to use high cut values ​​(for instance: :math:`cut > 0.85`) to ensure a larger volume of data for training with small test sets with higher prediction accuracy.  


.. _fitting-section:

Fitting to data
----------------

Once the user has loaded the file of interest with :ref:`load_data() <carregando-arquivos>`, it is then possible to fit the model to the data (Eq :eq:`bsw_and_sac` and :eq:`sac`). For this purpose, the method 
``fit()`` can be used.

.. py:function:: fit(p1=0.5, p2=0.4, p3=-0.4, p4=-0.2, p5=0.5, p6=-0.5, with_restriction=True, with_method='trf')

   :param p1: initial value of temperature-related parameter (:math:`\beta_1`). It is an optional parameter.
   :type p1: float
   :param p2: initial value of the parameter related to the electric field (:math:`\beta_2`). It is an optional parameter.
   :type p2: float
   :param p3: initial value of the parameter related to the inlet liquid flow rate (:math:`\beta_4`). It is an optional parameter.
   :type p3: float
   :param p4: initial value of the parameter related to the Kp (:math:`\beta_5`). It is an optional parameter.
   :type p4: float
   :param p5: initial value of the parameter related to the pre-exponential term (:math:`C_1`) in the model (Eq. :eq:`sac`). It is an optional parameter.
   :type p5: float
   :param p6: initial value of the parameter  related to API gravity (:math:`\beta_6`). It is an optional parameter.
   :type p6: float
   :raise RuntimeError: if there is an error during parameter optimization due to the initial guessess within the ranges used by default.
   :param with_restriction: it is an optional parameter, which indicates by default that the optimization of each of the parameters will be performed with restriction (:ref:`see optimization ranges for each parameter <target to code1>`). 
   :type with_restriction: Boolean
   :param with_method: it is an optional parameter indicating that the optimization of parameters will be performed with the method **trf** (by default). However, you can pass as an alternative method of optimization as **dogbox**. 
   :type with_method: str
   :return: nenhum.

.. _target to code1:

.. code-block:: python

   if with_restriction:
   bounds = ((-np.inf, 0, -np.inf, -np.inf, 0, -np.inf), (np.inf, np.inf, 0, 0, 1, np.inf)) 
   else:
   bounds = ((-np.inf, -np.inf, -np.inf, -np.inf, 0, -np.inf), (np.inf, np.inf, np.inf, np.inf, 1, np.inf))

If **with_restriction=True** then :math:`\beta_1\ \in\ [-\infty,+\infty]`, :math:`\beta_2\ \in\ [0,+\infty]`, :math:`\beta_4\ \in\ [-\infty,0]`, :math:`\beta_5\ \in\ [-\infty,0]`, 
:math:`C_1\ \in\ [0,1]`, :math:`\beta_6\ \in\ [-\infty,+\infty]`. On the contrary (**with_restriction=False**), except for :math:`C_1`, the optimization ranges for all parameters will be open :math:`[-\infty,+\infty]`.

.. warning::
   If the optimization with the option **with_restriction = True** and  initial guesses of parameters by default ​triggers an error, it is therefore advisable to use **with_restriction = False** providing different initial guesses to the parameters p1, p2, ..., p6

The following code allows you to fit the model to the data without using the Kalman filter and without any restrictions on the parameters.
.. code-block:: python
   
   first_simul = BSW()
   first_simul.load_data('all-5-oil-with-api.csv', kalman_filtered=False)
   first_simul.fit(with_restriction=False)

If the parameter optimization is successful, the ``fit()`` method generates three text files (with .txt extension):

#. File containing parameter values with their confidence intervals - :numref:`figura2` (see :ref:`theory <Estimation CI>`).
#. File containing variance-covariance matrix of the parameters, condition number, and the parametric correlation matrix - :numref:`figura3` (see :ref:`theory <Condition number and parmcorrmatrix>`).
#. File containing residual values between experimental data and simulated, values of :math:`\frac{2S}{AC}`,  determination coefficient (:math:`{R}^{2}`), 
   corrected Akaike information criterion, and chi-square goodness-of-fit test - :numref:`figura4` (see :ref:`theory <fittingcriteria>`)


.. _figura2:

.. figure:: ./figura2.jpg

   Parameter values and their confidence intervals for modeling *all-5-oil-with-api.csv* data

.. _figura3:

.. figure:: ./figura3.jpg

   Variance-covariance matrix of the parameters, condition number, and the parametric correlation matrix for modeling the *all-5-oil-with-api.csv* data 

.. _figura4:

.. figure:: ./figura4.jpg

   Residual values between experimental data :math:`{BS\&W}_{o}` and simulated, values of :math:`\frac{2S}{AC}`,  determination coefficient (:math:`{R}^{2}`), 
   corrected Akaike information criterion, chi-square goodness-of-fit test for modeling the *all-5-oil-with-api.csv* data

.. note::
   The names of each .txt output file are defined by the class automatically according to the file loaded in the method ``load_data()``


.. _Predict_section:

Model prediction
----------------
Once the model has been fitted to the data with the :ref:`fit() <fitting-section>`  method, it is possible to use then the ``predict()``  method sequentially .

.. py:function:: predict(data=None, plot_exp_data=True, showErr=True)

   :param data: test set to make the prediction. It is an optional parameter. If data=None, the training set is considered to be the same as the test set, that is all loaded data is used for modeling.
   :type data: pandas dataframe
   :param plot_exp_data: enables you to plot or not the experimental data. It is an optional parameter. If **plot_exp_data is False** then only the filtered data obtained with the Kalman filter are plotted, not the original experimental data.
   :type plot_exp_data: boolean
   :param showErr: running this method activates the plotting of results showing the confidence bands and the mean prediction of the model assuming that the residuals have a Gaussian distribution.
   :type showErr: boolean  


In the case of using the predict() method passing a null test data as a parameter, it will not plot anything and will print a warning indicating
**!The data used as parameter in predict() method is empty. No plotting results. Use a value for the cutoff parameter (e.g. 0.1) in load_data() to get a full test set**

For example the following code triggers the above warning 

.. code-block:: python
   
   first_simul = BSW()
   X_train, X_test = first_simul.load_data('all-5-oil-with-api.csv', kalman_filtered=False)
   first_simul.fit()
   first_simul.predict(X_test)

.. note::
   In the above example, as the :ref:`load_data() <carregando-arquivos>` method does not pass a **cut** parameter between 0 and 1, by default it takes cut=0.0 indicating that the data is not split into training and test sets, so that X_test is None. 

The following code loads a file named *p-66-otra-forma-input-2-without-atypical-values-with-all-values-Kfiltered-without-api.csv*, which already contains the filtered data with the Kalman filter. Here, we use **kalman_filtered=False** and pass cut=0.3 indicating 
that the data must be split in 30% for test and 70% for training. Then, we fit the model to 70% of data with the fit() method. The prediction on the test set is executed invoking the predict() method passing the test set (X_test) previously obtained with the load_data(). 
Since the predict() method has **plot_exp_data** and **showEr** equal to **True**, the results of modeling (confidence bands and mean prediction of the model (:numref:`figura5`) will be plotted together with the experimental data. 


.. code-block:: python

   second_simul = BSW()
   X_train, X_test = second_simul.load_data('p-66-otra-forma-input-2-without-atypical-values-with-all-values-Kfiltered-without-api.csv', kalman_filtered=False, cut=0.3)
   second_simul.fit(with_restriction=False)
   second_simul.predict(X_test)

.. _figura5:

.. figure:: ./figura5.jpg

   Prediction of the model on a test set using the predit() method of the BSW class. The optimization of the parameters in the model was performed with 70% of the data while the remaining 30% was used for testing. The methodology to obtain confidence bands and mean of the model can 
   be consulted in :ref:`Estimation confidence bands <Estimation confidence bands>`. Inside the figure is shown the determination coefficient (:math:`{R}^{2}`) and root mean square error.



As seen in :numref:`figura5`, the simulation plot is displayed in a GUI that allows the user to perform different actions on the figure such such as: zoom on different places of the figure, change the axis scale, save the figure to different formats, and so on.

.. _Errorellipses:

Error ellipses between parameters
---------------------------------
The error ellipse between two-parameters is drawn determining the autovalues and autovectors of the variance-covariance (2x2) matrix between parameters in question. See a detailed theory dealing with :ref:`error ellipses <Error ellipses>`.
The ``error_ellipses()`` method can be called after the :ref:`fit() <fitting-section>` method to calculate ellipses of error between parameters.

.. py:function:: error_ellipses(self, Bool_parameter={"B1": True, "B2": True, "B4": True, "B5": True, "B6": False}, sigma=3, multiples_plot=True):

   :param Bool_parameter: it is an optional parameter indicating the error ellipses combination parameters to be printed. By default, the dictionary will indicate the plotting of error ellipses for parameteres involving B1, B2, B4 and B5.
   :type data: dictionary
   :param sigma: this parameter indicates the variance applied to the axis length of ellipse.
   :type sigma: float
   :param multiples_plot: this paramter indicates how the plotting will be performed. When **False** indicates one plot window for each parameter pair. Otherwise, all error ellipses for each parameter combination (e.g. :math:`\beta_{1} - \beta_{2}`, :math:`\beta_{1} - \beta_{4}`, :math:`\beta_{1} - \beta_{5}`, :math:`\beta_{1} - \beta_{6}`) will be printed in a single window. 
   :type showErr: boolean

The error ellipses between two parameters calculated by this class is directly related to characteristic of variance-covariance matrix (or :ref:`parametric correlation <Condition number and parmcorrmatrix>` ) of parameters. The amount of correlation can be interpreted by how thin the ellipse. That is, thinner ellipses, the parameters are more correlated. For example, from (:numref:`figura7`)
can be observed that the ellipse in **(b)** :math:`\beta_{4} - \beta_{5}` is thinner than in **(a)** :math:`\beta_{1} - \beta_{4}` caused by higher off-diagonal elements values of covariance matrix between parameters :math:`\beta_{4}` and :math:`\beta_{5}`. In fact, the parametric correlation between :math:`\beta_{4}` and :math:`\beta_{5}` is higher (-0.999) than that between :math:`\beta_{1}` and :math:`\beta_{4}` (-0.79).
From a physical point of view, this fact reveals that the liquid inlet flow rate (:math:`Q_{L}`) is very correlated with (:math:`K_{p}`) or viscosity of emulsions into electrocoalescer. On the other hand, it appears that :math:`T` is less correlated with :math:`Q_{L}`.

.. _figura7:

.. figure:: ./figura7.jpg

   Error ellipses between two parameter pairs and covariance matrix between them. **(a)** :math:`\beta_{1}` and :math:`\beta_{4}` **(b)** :math:`\beta_{4} - \beta_{5}`. The :ref:`parametric correlation  <Condition number and parmcorrmatrix>` is shown for each error ellipse
